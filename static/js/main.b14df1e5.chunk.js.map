{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","active","stored","answer","this","setState","num","concat","Object","toConsumableArray","op","temp","join","arr","evaluate","_this2","react_default","a","createElement","className","map","i","onClick","activePush","calcClear","sumPush","calc","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRA2FeA,oNAtFbC,MAAQ,CACNC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,8EAIRC,KAAKC,SAAS,CACZJ,OAAQ,GACRC,OAAQ,GACRC,OAAQ,uCAIDG,GACTF,KAAKC,SAAS,CAAEJ,OAAM,GAAAM,OAAAC,OAAAC,EAAA,EAAAD,CAAMJ,KAAKJ,MAAMC,QAAjB,CAAyBK,sCAGzCI,GACN,IAAIC,EAAOP,KAAKJ,MAAMC,OAAOW,KAAK,IAClCR,KAAKC,SAAS,CAAEJ,OAAQ,KACxBG,KAAKC,SAAS,CAAEH,OAAM,GAAAK,OAAAC,OAAAC,EAAA,EAAAD,CAAMJ,KAAKJ,MAAME,QAAjB,CAAyBS,EAAMD,mCAGlDC,GACH,IACIE,EADG,GAAAN,OAAAC,OAAAC,EAAA,EAAAD,CAAOJ,KAAKJ,MAAME,QAAlB,CAA0BS,EAAKC,KAAK,MAC7BA,KAAK,IACnBR,KAAKC,SAAS,CAAEF,OAAQW,YAASD,sCAG1B,IAAAE,EAAAX,KAGP,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAKd,KAAKJ,MAAMC,QAChBe,EAAAC,EAAAC,cAAA,UAAKd,KAAKJ,MAAME,QAChBc,EAAAC,EAAAC,cAAA,UAAKd,KAAKJ,MAAMG,SAIlBa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAXN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAY7BC,IAAI,SAAAC,GACR,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAW,IAAME,GACpBL,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKQ,WAAWF,KAAKA,MAIlDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKQ,WAAW,OAAvC,MAIFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKS,cAA5B,QAEFR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKU,QAAQ,OAApC,SAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKU,QAAQ,OAApC,SAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKU,QAAQ,OAApC,MAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKU,QAAQ,OAApC,MAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKW,KAAKX,EAAKf,MAAMC,UAA5C,eA9EM0B,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b14df1e5.chunk.js","sourcesContent":["import React from 'react';\nimport { evaluate } from 'mathjs';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    active: [],\n    stored: [],\n    answer: 0,\n  }\n\n  calcClear() {\n    this.setState({\n      active: [],\n      stored: [],\n      answer: 0\n    })\n  }\n\n  activePush(num) {\n    this.setState({ active: [...this.state.active, num] });\n  }\n\n  sumPush(op) {\n    let temp = this.state.active.join('');\n    this.setState({ active: [] });\n    this.setState({ stored: [...this.state.stored, temp, op] });\n  }\n\n  calc(temp) {\n    let ans = [...this.state.stored, temp.join('')];\n    let arr = ans.join('');\n    this.setState({ answer: evaluate(arr) })\n  }\n\n  render() {\n    const keys = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n\n    return (\n      <div className=\"container\">\n        <div className=\"display\">\n          <h1>{this.state.active}</h1>\n          <h1>{this.state.stored}</h1>\n          <h1>{this.state.answer}</h1>\n        </div>\n\n        {/* Numbers being mapped from KEYS w/ functionallity*/}\n        <div className=\"gridCont\">\n          {keys.map(i => {\n            return (\n              <div className={\"x\" + i}>\n                <button onClick={() => this.activePush(i)}>{i}</button>\n              </div>\n            )\n          })}\n          <div className=\"dot\">\n            <button onClick={() => this.activePush(\".\")}>.</button>\n          </div>\n\n          {/* Operators */}\n          <div className=\"ac\">\n            <button onClick={() => this.calcClear()}>A/C</button>\n          </div>\n          <div className=\"neg\">\n            <button>+/-</button>\n          </div>\n          <div className=\"perc\">\n            <button>%</button>\n          </div>\n          <div className=\"divide\">\n            <button onClick={() => this.sumPush(\"/\")}>รท</button>\n          </div>\n          <div className=\"multi\">\n            <button onClick={() => this.sumPush(\"*\")}>ร</button>\n          </div>\n          <div className=\"minus\">\n            <button onClick={() => this.sumPush(\"-\")}>-</button>\n          </div>\n          <div className=\"add\">\n            <button onClick={() => this.sumPush(\"+\")}>+</button>\n          </div>\n          <div className=\"equals\">\n            <button onClick={() => this.calc(this.state.active)}>=</button>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}